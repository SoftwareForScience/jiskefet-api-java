/*
 * Jiskefet
 * Running with /api prefix
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CreateRunDto;
import io.swagger.client.model.LinkLogToRunDto;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RunsApi {
    private ApiClient apiClient;

    public RunsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RunsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for runsGet
     * @param orderBy On which field to order on. (optional)
     * @param orderDirection The order direction, either ascending or descending. (optional)
     * @param pageSize The maximum amount of logs in each result. (optional, default to 25)
     * @param pageNumber The current page, i.e. the offset in the result set based on pageSize. (optional, default to 1)
     * @param runNumber The id of the log. (optional)
     * @param startTimeO2Start The lower bound of the timeO2Start filter range. (optional)
     * @param endTimeO2Start The upper bound of the timeO2Start filter range. (optional)
     * @param startTimeTrgStart The lower bound of the timeTrgStart filter range. (optional)
     * @param endTimeTrgStart The upper bound of the timeTrgStart filter range. (optional)
     * @param startTimeTrgEnd The lower bound of the timeTrgEnd filter range. (optional)
     * @param endTimeTrgEnd The upper bound of the timeTrgEnd filter range. (optional)
     * @param startTimeO2End The lower bound of the timeO2End filter range. (optional)
     * @param endTimeO2End The upper bound of the timeO2End filter range. (optional)
     * @param activityId The id of the activity. (optional)
     * @param runType The type of the run. (optional)
     * @param runQuality The quality of the run. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsGetCall(String orderBy, String orderDirection, String pageSize, String pageNumber, String runNumber, OffsetDateTime startTimeO2Start, OffsetDateTime endTimeO2Start, OffsetDateTime startTimeTrgStart, OffsetDateTime endTimeTrgStart, OffsetDateTime startTimeTrgEnd, OffsetDateTime endTimeTrgEnd, OffsetDateTime startTimeO2End, OffsetDateTime endTimeO2End, String activityId, Integer runType, Integer runQuality, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (orderDirection != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderDirection", orderDirection));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNumber", pageNumber));
        if (runNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("runNumber", runNumber));
        if (startTimeO2Start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTimeO2Start", startTimeO2Start));
        if (endTimeO2Start != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTimeO2Start", endTimeO2Start));
        if (startTimeTrgStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTimeTrgStart", startTimeTrgStart));
        if (endTimeTrgStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTimeTrgStart", endTimeTrgStart));
        if (startTimeTrgEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTimeTrgEnd", startTimeTrgEnd));
        if (endTimeTrgEnd != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTimeTrgEnd", endTimeTrgEnd));
        if (startTimeO2End != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTimeO2End", startTimeO2End));
        if (endTimeO2End != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTimeO2End", endTimeO2End));
        if (activityId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("activityId", activityId));
        if (runType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("runType", runType));
        if (runQuality != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("runQuality", runQuality));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsGetValidateBeforeCall(String orderBy, String orderDirection, String pageSize, String pageNumber, String runNumber, OffsetDateTime startTimeO2Start, OffsetDateTime endTimeO2Start, OffsetDateTime startTimeTrgStart, OffsetDateTime endTimeTrgStart, OffsetDateTime startTimeTrgEnd, OffsetDateTime endTimeTrgEnd, OffsetDateTime startTimeO2End, OffsetDateTime endTimeO2End, String activityId, Integer runType, Integer runQuality, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = runsGetCall(orderBy, orderDirection, pageSize, pageNumber, runNumber, startTimeO2Start, endTimeO2Start, startTimeTrgStart, endTimeTrgStart, startTimeTrgEnd, endTimeTrgEnd, startTimeO2End, endTimeO2End, activityId, runType, runQuality, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param orderBy On which field to order on. (optional)
     * @param orderDirection The order direction, either ascending or descending. (optional)
     * @param pageSize The maximum amount of logs in each result. (optional, default to 25)
     * @param pageNumber The current page, i.e. the offset in the result set based on pageSize. (optional, default to 1)
     * @param runNumber The id of the log. (optional)
     * @param startTimeO2Start The lower bound of the timeO2Start filter range. (optional)
     * @param endTimeO2Start The upper bound of the timeO2Start filter range. (optional)
     * @param startTimeTrgStart The lower bound of the timeTrgStart filter range. (optional)
     * @param endTimeTrgStart The upper bound of the timeTrgStart filter range. (optional)
     * @param startTimeTrgEnd The lower bound of the timeTrgEnd filter range. (optional)
     * @param endTimeTrgEnd The upper bound of the timeTrgEnd filter range. (optional)
     * @param startTimeO2End The lower bound of the timeO2End filter range. (optional)
     * @param endTimeO2End The upper bound of the timeO2End filter range. (optional)
     * @param activityId The id of the activity. (optional)
     * @param runType The type of the run. (optional)
     * @param runQuality The quality of the run. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runsGet(String orderBy, String orderDirection, String pageSize, String pageNumber, String runNumber, OffsetDateTime startTimeO2Start, OffsetDateTime endTimeO2Start, OffsetDateTime startTimeTrgStart, OffsetDateTime endTimeTrgStart, OffsetDateTime startTimeTrgEnd, OffsetDateTime endTimeTrgEnd, OffsetDateTime startTimeO2End, OffsetDateTime endTimeO2End, String activityId, Integer runType, Integer runQuality) throws ApiException {
        ApiResponse<Object> resp = runsGetWithHttpInfo(orderBy, orderDirection, pageSize, pageNumber, runNumber, startTimeO2Start, endTimeO2Start, startTimeTrgStart, endTimeTrgStart, startTimeTrgEnd, endTimeTrgEnd, startTimeO2End, endTimeO2End, activityId, runType, runQuality);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param orderBy On which field to order on. (optional)
     * @param orderDirection The order direction, either ascending or descending. (optional)
     * @param pageSize The maximum amount of logs in each result. (optional, default to 25)
     * @param pageNumber The current page, i.e. the offset in the result set based on pageSize. (optional, default to 1)
     * @param runNumber The id of the log. (optional)
     * @param startTimeO2Start The lower bound of the timeO2Start filter range. (optional)
     * @param endTimeO2Start The upper bound of the timeO2Start filter range. (optional)
     * @param startTimeTrgStart The lower bound of the timeTrgStart filter range. (optional)
     * @param endTimeTrgStart The upper bound of the timeTrgStart filter range. (optional)
     * @param startTimeTrgEnd The lower bound of the timeTrgEnd filter range. (optional)
     * @param endTimeTrgEnd The upper bound of the timeTrgEnd filter range. (optional)
     * @param startTimeO2End The lower bound of the timeO2End filter range. (optional)
     * @param endTimeO2End The upper bound of the timeO2End filter range. (optional)
     * @param activityId The id of the activity. (optional)
     * @param runType The type of the run. (optional)
     * @param runQuality The quality of the run. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runsGetWithHttpInfo(String orderBy, String orderDirection, String pageSize, String pageNumber, String runNumber, OffsetDateTime startTimeO2Start, OffsetDateTime endTimeO2Start, OffsetDateTime startTimeTrgStart, OffsetDateTime endTimeTrgStart, OffsetDateTime startTimeTrgEnd, OffsetDateTime endTimeTrgEnd, OffsetDateTime startTimeO2End, OffsetDateTime endTimeO2End, String activityId, Integer runType, Integer runQuality) throws ApiException {
        com.squareup.okhttp.Call call = runsGetValidateBeforeCall(orderBy, orderDirection, pageSize, pageNumber, runNumber, startTimeO2Start, endTimeO2Start, startTimeTrgStart, endTimeTrgStart, startTimeTrgEnd, endTimeTrgEnd, startTimeO2End, endTimeO2End, activityId, runType, runQuality, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param orderBy On which field to order on. (optional)
     * @param orderDirection The order direction, either ascending or descending. (optional)
     * @param pageSize The maximum amount of logs in each result. (optional, default to 25)
     * @param pageNumber The current page, i.e. the offset in the result set based on pageSize. (optional, default to 1)
     * @param runNumber The id of the log. (optional)
     * @param startTimeO2Start The lower bound of the timeO2Start filter range. (optional)
     * @param endTimeO2Start The upper bound of the timeO2Start filter range. (optional)
     * @param startTimeTrgStart The lower bound of the timeTrgStart filter range. (optional)
     * @param endTimeTrgStart The upper bound of the timeTrgStart filter range. (optional)
     * @param startTimeTrgEnd The lower bound of the timeTrgEnd filter range. (optional)
     * @param endTimeTrgEnd The upper bound of the timeTrgEnd filter range. (optional)
     * @param startTimeO2End The lower bound of the timeO2End filter range. (optional)
     * @param endTimeO2End The upper bound of the timeO2End filter range. (optional)
     * @param activityId The id of the activity. (optional)
     * @param runType The type of the run. (optional)
     * @param runQuality The quality of the run. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsGetAsync(String orderBy, String orderDirection, String pageSize, String pageNumber, String runNumber, OffsetDateTime startTimeO2Start, OffsetDateTime endTimeO2Start, OffsetDateTime startTimeTrgStart, OffsetDateTime endTimeTrgStart, OffsetDateTime startTimeTrgEnd, OffsetDateTime endTimeTrgEnd, OffsetDateTime startTimeO2End, OffsetDateTime endTimeO2End, String activityId, Integer runType, Integer runQuality, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsGetValidateBeforeCall(orderBy, orderDirection, pageSize, pageNumber, runNumber, startTimeO2Start, endTimeO2Start, startTimeTrgStart, endTimeTrgStart, startTimeTrgEnd, endTimeTrgEnd, startTimeO2End, endTimeO2End, activityId, runType, runQuality, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsIdGet
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsIdGetCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/runs/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsIdGetValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling runsIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = runsIdGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runsIdGet(Integer id) throws ApiException {
        ApiResponse<Object> resp = runsIdGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runsIdGetWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = runsIdGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsIdGetAsync(Integer id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsIdGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsIdLogsPatch
     * @param linkLogToRunDto  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsIdLogsPatchCall(LinkLogToRunDto linkLogToRunDto, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = linkLogToRunDto;

        // create path and map variables
        String localVarPath = "/runs/{id}/logs"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsIdLogsPatchValidateBeforeCall(LinkLogToRunDto linkLogToRunDto, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'linkLogToRunDto' is set
        if (linkLogToRunDto == null) {
            throw new ApiException("Missing the required parameter 'linkLogToRunDto' when calling runsIdLogsPatch(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling runsIdLogsPatch(Async)");
        }
        

        com.squareup.okhttp.Call call = runsIdLogsPatchCall(linkLogToRunDto, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param linkLogToRunDto  (required)
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runsIdLogsPatch(LinkLogToRunDto linkLogToRunDto, Integer id) throws ApiException {
        ApiResponse<Object> resp = runsIdLogsPatchWithHttpInfo(linkLogToRunDto, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param linkLogToRunDto  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runsIdLogsPatchWithHttpInfo(LinkLogToRunDto linkLogToRunDto, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = runsIdLogsPatchValidateBeforeCall(linkLogToRunDto, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param linkLogToRunDto  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsIdLogsPatchAsync(LinkLogToRunDto linkLogToRunDto, Integer id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsIdLogsPatchValidateBeforeCall(linkLogToRunDto, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsPost
     * @param createRunDto  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsPostCall(CreateRunDto createRunDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createRunDto;

        // create path and map variables
        String localVarPath = "/runs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsPostValidateBeforeCall(CreateRunDto createRunDto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'createRunDto' is set
        if (createRunDto == null) {
            throw new ApiException("Missing the required parameter 'createRunDto' when calling runsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = runsPostCall(createRunDto, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param createRunDto  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object runsPost(CreateRunDto createRunDto) throws ApiException {
        ApiResponse<Object> resp = runsPostWithHttpInfo(createRunDto);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param createRunDto  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> runsPostWithHttpInfo(CreateRunDto createRunDto) throws ApiException {
        com.squareup.okhttp.Call call = runsPostValidateBeforeCall(createRunDto, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createRunDto  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsPostAsync(CreateRunDto createRunDto, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsPostValidateBeforeCall(createRunDto, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
